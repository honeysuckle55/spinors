
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source\auto_examples\4_detuning_grad.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_source_auto_examples_4_detuning_grad.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_auto_examples_4_detuning_grad.py:


Example 4: Raman Detuning Gradient Ground State
===============================================

Starts with the Thomas-Fermi solution. Configures a uniform Raman coupling
and a linear gradient in the Raman detuning. Propagates in imaginary time,
before reaching the ground state of this configuration. The detuning
gradient separates the two components vertically, and the line where they
interfere is a row of vortices.

.. GENERATED FROM PYTHON SOURCE LINES 12-77

.. code-block:: default

    # pylint: disable=wrong-import-position
    import os
    import sys
    sys.path.insert(0, os.path.abspath('../..'))

    import numpy as np  # noqa: E402

    from spinor_gpe.pspinor import pspinor as spin  # noqa: E402


    # 1. SETUP

    DATA_PATH = 'examples/Trial_004'

    FREQ = 50
    W = 2*np.pi*FREQ
    Y_SCALE = 1
    Z_SCALE = 40.0

    ATOM_NUM = 1e4
    OMEG = {'x': W, 'y': Y_SCALE * W, 'z': Z_SCALE * W}
    G_SC = {'uu': 1, 'dd': 0.995, 'ud': 0.995}

    ps = spin.PSpinor(DATA_PATH, overwrite=True,  # Initialize PSpinor object
                      atom_num=ATOM_NUM,
                      omeg=OMEG,
                      g_sc=G_SC,
                      pop_frac=(0.5, 0.5),
                      r_sizes=(16, 16),
                      mesh_points=(256, 256))

    ps.coupling_setup(wavel=804e-9, kin_shift=True)

    # Shifts the k-space density momentum peaks by `kshift_val` [`kL_recoil` units]
    ps.shift_momentum(kshift_val=0.6, frac=(0.5, 0.5))
    ps.coupling_uniform(5 * ps.EL_recoil)
    ps.detuning_grad(-12)

    # Selects the form of the coupling operator in the rotated reference frame
    ps.rot_coupling = True

    ZOOM = 2  # Zooms the momentum-space density plots by a constant factor

    ps.plot_spins(rscale=ps.rad_tf, kscale=ps.kL_recoil, zoom=ZOOM)


    # 2. RUN (Imaginary-time)

    N_STEPS = 1000
    DT = 1/50
    DEVICE = 'cuda'
    ps.rand_seed = 99999

    res, t_prop = ps.imaginary(DT, N_STEPS, DEVICE, is_sampling=True,
                               n_samples=50)


    # 3. ANALYZE

    res.plot_spins(rscale=ps.rad_tf, kscale=ps.kL_recoil, zoom=ZOOM)
    res.plot_total(kscale=ps.kL_recoil, zoom=ZOOM)
    res.plot_pops()
    res.make_movie(rscale=ps.rad_tf, kscale=ps.kL_recoil, play=True, zoom=ZOOM,
                   norm_type='half')
    print(f'\nFinal energy: {res.eng_final[0]} [hbar * omeg]')


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_source_auto_examples_4_detuning_grad.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 4_detuning_grad.py <4_detuning_grad.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 4_detuning_grad.ipynb <4_detuning_grad.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
